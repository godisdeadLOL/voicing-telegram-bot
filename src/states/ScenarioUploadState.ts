import { Message } from "node-telegram-bot-api"
import { ChatContextManager } from "@/core/ChatContextManager"
import { ChatState } from "@/core/states/ChatState"
import { IMessageHandler } from "@/core/states"
import fs from "fs/promises"
import { recursiveMessageSearch } from "@/utils"

export type ScenarioEntry = {
	index: number

	id: string
	name: string
	content: string
}

export type ScenarioUploadData = {
	error: string | null
	scenario: ScenarioEntry[]
}

export class ScenarioUploadState extends ChatState<ScenarioUploadData> implements IMessageHandler {
	public maxFileSize = 2

	public generateSaveData() {
		return { isError: null }
	}

	async send(context: ChatContextManager): Promise<void> {
		const { bot, chatId } = context.data
		const { error } = this.getSaveData(context)

		const text = !error
			? `üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ \`.json\`. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${this.maxFileSize} –ú–ë.`
			: `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: \`${error}\`.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`

		bot.sendMessage(chatId, text, { parse_mode: "Markdown" })
	}

	async handleMessage(context: ChatContextManager, msg: Message): Promise<string | undefined> {
		const { chatId, bot, stateId } = context.data

		const saveData = this.getSaveData(context)
		const document = recursiveMessageSearch(msg, (msg) => msg.document)

		if (!document) {
			saveData.error = "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞"
			return stateId
		}

		const documentSize = document.file_size ? document.file_size / 1024 / 1024 : undefined
		if (documentSize! > this.maxFileSize) {
			saveData.error = "–ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä"
			return stateId
		}

		// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫–∏ –ø–æ–¥ –Ω–æ–≤—ã–µ
		await fs.rm(`downloads/${chatId}`, { recursive: true, force: true })
		await fs.mkdir(`downloads/${chatId}/clips`, { recursive: true })

		const downloadPath = await bot.downloadFile(document.file_id, `downloads/${chatId}`)
		const content = await fs.readFile(downloadPath, { encoding: "utf-8" })

		// –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è
		try {
			saveData.scenario = JSON.parse(content) as ScenarioEntry[]
			for (let i = 0; i < saveData.scenario.length; i++) saveData.scenario[i].index = i
		} catch {
			saveData.error = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è"
			return stateId
		}

		await fs.rm(downloadPath)
		saveData.error = null

		return context.getNextStateId()
	}
}
